-- generic function which just returns the value itself
let id (x : 'a) : 'a = x

-- operator overloading
let a - b : Int = .. ;
let -x : Int = .. ;

var result = -1 - 3;

{- `result` becomes:
 - |
 - | (- (- 1)) 3
 - |
 - 
 - since the function `-` can either return an Int, or an Int -> Int,
 - the kind of `-` can be determined at compile time:
 - |
 - | (- 1)        -- might return `Int` or `Int -> Int`
 - | (- x)        -- `-` must accept an Int, so `x` must be an `Int`
 - | (- (- 1))    -- therefore `(- 1)` must return an `Int`
 - |              -- still might return `Int` or `Int -> Int`
 - | (- (- 1)) 3  -- since `3` is passed as another argument,
 - |              -- `(- (- 1))` must return an `Int -> Int`
 - |
 -
 -}