// function definition
def max (a : Int) (b : Int) : Int {
    if a > b {
        return a;
    } else {
        return b;
    }
}

/* Note: the `def` keyword is used because it will
 * allow for more options than simply `function`.
 *
 * For example:
 * |
 * | def Vec2::get_x(v : Vec2) : Float = v.x;
 * |
 * 
 * would get compiled into:
 * |
 * | def Vec2::get_x = \(v : Vec2) -> v.x : Float;
 * |
 * 
 * which shows that `def` is similar to `var`, except
 * values will be immutable and include the ability to
 * add scope to functions/values.
 */

// function application
var greatest = max 3 4;

// lambda function
var lambda : Int -> Int = \x -> x * 2;

// block lambda function
var lambda' : Int -> Int = \x -> {
    return x + x;
};

// delayed function definition
var max' : Int -> Int -> Int;
max' = \a -> \b -> max a b;

// currying
var positive : Int -> Int = max 1;

// procedural style functions
def izard(a : String, b : String) : String {
    return a ++ " fo' " ++ b ++ "izard";
}

var message = izard("bash", "sh");
