-- function definition
let max (a : Int) (b : Int) : Int = if a > b { a } else { b };

-- function application
var greatest = max 3 4;

-- lambda function
let lambda : Int -> Int = \x -> x * 2;

-- block lambda function
let lambda' : Int -> Int = \x -> {
	return x + x;
};

-- delayed function definition
var max' : Int -> Int -> Int;
max' = \a \b -> max a b;

-- nullary function (pass-by-name)
var message : -> String = -> shuffle "hello world";

-- currying
let positive : Int -> Int = max 1;

-- procedural style functions
let izard(a : String, b : String) : String {
	return a ++ " fo' " ++ b ++ "izard";
}

var message = izard("bash", "sh");

-- implicit return (final `;` not required)
let wizard() {
	-- "flowers fo' wizard"
	izard("flowers", "wi")
}

-- sequent style formatting seen in proof languages
let sequent_style
		(n : Int)
		(s : String)
		------------
		: Bool
	= length s == n