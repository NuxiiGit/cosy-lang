-- variable
var a = 3;

-- constant
let b = 3.0;

-- character
var ch = 'a';

-- string
var str = "abc";
var str' = ['a', 'b', 'c'];

-- delayed variable instantiation
var i : Int;
i = 1;

-- block declaration
var {
	a = 1,
	b = "nice"
}

-- where clause
let {
	public_function() : String = secret_value(secret_key)
} where {
	secret_value(key : String) : String = "shh, it's " ++ key,
	secret_key = "baby"
}

let result = public_function(); -- compiles
let key = secret_key;           -- does not compile

-- mutual recursion
let {
	is_even(n) = if n == 0 then true  else is_odd(n),
	is_odd(n)  = if n == 0 then false else is_even(n)
}

{- Note:
 - This would not be possible if you did it like
 - |
 - |	let is_even(n) = .. ;
 - |	let is_odd(n) = .. ;
 - |
 - 
 - because `is_even` doesn't know about `is_odd` until later.
 - 
 - Using a block declaration, both identifiers can be known at the same time.
 -
 -}