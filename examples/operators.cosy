-- operator definition
let a <=> b = Math::sign(a - b);

if 2 <=> 3 == -1 {
    print("2 less than 3");
}

{- Operators are simply functions with special predcedence.
 - For example:
 - |
 - | let (a : Int) <> (b : Int) : Bool = a != b;
 - |
 - 
 - is equivalent to the following function definition:
 - |
 - | let <> : Bool = \(a : Int) -> \(b : Int) -> a != b;
 - |
 - 
 - or literally:
 - |
 - | let (<>) (a : Int) (b : Int) : Bool = a != b;
 - |
 - 
 - (note, the requried parenthesis around the `<>` identifier).
 -
 -}

-- special function application "operator"
var xs = filter (!= 'a') $ "animal" ++ "izard";


{- This special `$` operator is not actually a valid operator
 - symbol and cannot be used in identifiers.
 - 
 - This symbol lets you omit brackets from an expression. The
 - previous example would otherwise look like:
 - | 
 - | filter (!= 'a') ("animal" ++ "izard")
 - |
 - 
 - which looks terrible in comparrison.
 -
 - The `$` operator can be chained to convert expressions such as:
 - |
 - | this (long (expression might (get difficult to (understand || not))))
 - |
 - 
 - into the relatively simpler form of:
 - |
 - | this $ long $ expression might $ get difficult to $ understand || not
 - |
 -
 - All you have to remember is that `$` has the highest precedence
 - and is right associative.
 - 
 - Another important use is being able to pass lambda functions
 - as parameters without requiring then to be in parenthesis.
 - Consider the example `filter (\x -> x % 2 == 0)` which filters
 - all even numbers from a list. The parenthesis around the lambda
 - function `\x -> x % 2 == 0` are required under the syntax rules.
 - However, we can remove them by using `$` instead:
 - |
 - | let filter_even = filter (\x -> x % 2 == 0);
 - |
 - 
 - becomes
 - |
 - | let filter_even = filter $ \x -> x % 2 == 0;
 - |
 -
 -}

-- special postfix operator
var a?+ = a + 1;

{- Any operator which begins with `?` will be parsed as a postfix
 - operator.
 -
 - This could be used for the factorial operator `?!` or any other
 - operator where postfix is prefered.
 -
 - A specific use is for the option type, where `?` will be its
 - name. Illustration:
 - |
 - | enum 'A? {
 - |   Some 'A,
 - |   None
 - | }
 - |
 - 
 - and hence we should be able to write:
 - |
 - | var nullable_int : Int? = None;
 - | nullable_int = Some 3;
 - |
 -
 -}