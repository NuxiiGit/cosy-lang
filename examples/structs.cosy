-- tuples
let point = (3.0, 2.0)
match point {
	(l, r) = l * r
}

-- typedefs
type Point = (i32, i32)
type Empty = ()

-- records
type Vec2 = record { x : f32, y : f32 }
let vec : Vec2 = { x = 2.0, y = 4.2 }
match vec {
	{ a = x, b = y } = a + b
}

-- setting members
vec.x = 5.0     -- record
point.0 = 12.3  -- tuple

-- getting members
let y = vec.y    -- record
let b = point.1  -- tuple

-- variants
type Number = i32 | f32
let mut number : Number
number = 12    -- valid
number = 14.3  -- also valid
match number {
	i : i32 = 2   * i,
	f : f32 = 2.0 * f
}

-- choices/enum
type Height = choice {
	SHORT,
	AVERAGE,
	TALL
}
let height : Height = choice SHORT
match height {
	choice SHORT   = 0,
	choice AVERAGE = 1,
	choice TALL    = 2
}

-- nullable/option type
type Option('a) = 'a | ()
let result : Option(i32) = returns_error()
match result {
	x : i32 = print(x),
	()      = print("nothing")
}