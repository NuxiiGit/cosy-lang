-- void type is used for non-terminating programs
def error(msg : str) : void = {
    println(msg);
    exit()
};

-- some control structures may also have a type of `void`
let a : void = continue;
let b : void = return;
let c : void = break;

-- absurd, which lets you coerce `void` into any type ("ex falso quodlibet")
def absurd[a : type](x : void) : a = absurd[a](x);

-- `nothing` type is used for terminating programs which return nothing of interest
def say_hello(message : str) : nothing = {
    printf["{}, and to that I say: hello!"](message);
};

-- the empty tuple `()` is the only element of the nothing type
let boring : nothing = ();

-- blocks may also return the nothing type if no implicit return is given
let boring' : nothing = {
    println("hello");
    println("hi again");
};
